import {NamedElement} from "./util";
import {Brick} from "./bricks";
import {State} from "./state.class";

/**
 * Application built over bricks.
 */
export class Application extends NamedElement {

    private readonly _bricks: Brick[];
    private readonly _states: State[];

    /**
     * @param {String} name: the name of the application
     * @param {Brick[]} bricks: bricks over which the application operates
     * @param {State[]} states: states of the application with the first one being the initial state
     */
    constructor(name: string, bricks: Brick[], states: State[]) {
        super(name);
        this._bricks = bricks;
        this._states = states;
    }

    /**
     * External representation: Arduino program
     * @return {string}
     */
    public export(): string {


        let result = (`// generated by TypeScriptArduinoML` + `\n`);

        this._bricks.forEach(brick => { result += (`${brick.declare()}` + `\n`); })
        result += (`void setup() {` + `\n`);
        this._bricks.forEach(brick => { result += (`${brick.setup()}` + `\n`); })
        result += (`}` + `\n`);
        result += (`int state = LOW; int prev = HIGH;` + `\n`);
        result += (`long time = 0; long debounce = 200;` + `\n`);
        this._states.forEach(state => {result += (`${state.setup()}` + `\n`);})
        result += (`void loop() { state_${this._states[0].name}(); }`);

        return result
    }
}
